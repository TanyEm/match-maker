// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/TanyEm/match-maker/v2/internal/match (interfaces: Keeper)
//
// Generated by this command:
//
//	mockgen -destination=./storage_mock.go -package=match github.com/TanyEm/match-maker/v2/internal/match Keeper
//

// Package match is a generated GoMock package.
package match

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockKeeper is a mock of Keeper interface.
type MockKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockKeeperMockRecorder
	isgomock struct{}
}

// MockKeeperMockRecorder is the mock recorder for MockKeeper.
type MockKeeperMockRecorder struct {
	mock *MockKeeper
}

// NewMockKeeper creates a new mock instance.
func NewMockKeeper(ctrl *gomock.Controller) *MockKeeper {
	mock := &MockKeeper{ctrl: ctrl}
	mock.recorder = &MockKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeeper) EXPECT() *MockKeeperMockRecorder {
	return m.recorder
}

// AddLeaderBoard mocks base method.
func (m *MockKeeper) AddLeaderBoard(lb *LeaderBoard) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddLeaderBoard", lb)
}

// AddLeaderBoard indicates an expected call of AddLeaderBoard.
func (mr *MockKeeperMockRecorder) AddLeaderBoard(lb any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLeaderBoard", reflect.TypeOf((*MockKeeper)(nil).AddLeaderBoard), lb)
}

// GetLeaderBoard mocks base method.
func (m *MockKeeper) GetLeaderBoard(matchID string) *LeaderBoard {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLeaderBoard", matchID)
	ret0, _ := ret[0].(*LeaderBoard)
	return ret0
}

// GetLeaderBoard indicates an expected call of GetLeaderBoard.
func (mr *MockKeeperMockRecorder) GetLeaderBoard(matchID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLeaderBoard", reflect.TypeOf((*MockKeeper)(nil).GetLeaderBoard), matchID)
}
